{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Eagle Army Docs","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Weclome to the Eagle Army 3488 website for documentation! This site contains info on getting started with robot software development, background on more advanced topics and features, as well as other tidbits that we picked up while being a part of the team.</p> <p>@Ollie here's the repository: https://github.com/jrecera0/jrecera0.github.io/</p> <p></p> <p>Notice any issues or wish to add more info that may benefit future members? Feel free to contribute by making a pull request or by contacting any one of us at [insert contacts here]!</p>"},{"location":"#where-should-i-start","title":"Where should I start?","text":"<p>Completely new to programming? Check out Resources on where to go to learn how to code, and for other useful info too! Otherwise, if you already have a bit of experience, feel free to start at Getting Started to get yourself set up.</p>"},{"location":"#administrative-stuff","title":"Administrative stuff","text":""},{"location":"#documentation-team","title":"@Documentation Team","text":"<ul> <li>Timeline</li> <li>Categories</li> <li>Writing Guidelines</li> <li>Weekly notes will also be posted from each meeting, just keep an eye on the <code>_admin</code> folder.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>    mkdocs.yml      # The configuration file.\n    docs/\n        _admin/     # Folder with all our organizational stuff\n            fox-box/        # Random notes from James\n            info/           # General important project info\n            weekly-notes/   # Notes from weekly meetings\n        _assets/    # Folder containing assets other than text\n        autonomous/ # Category for autonomous docs\n        code-examples/  # Category for sample code\n        ...         # Omitted other sections\n        resources/  # Category for resources\n        index.md    # The documentation homepage.\n</code></pre>"},{"location":"_admin/fox-box/","title":"The Fox Box","text":"<p>This is a category so James can put in his random disorganized notes for stuff he comes up with and thinks of, feel free to explore and go through these.</p>"},{"location":"_admin/fox-box/06_01_23/","title":"Timeline Ideas","text":"<p>In theory, it should be possible to make and finalize some section ideas pretty early on for what we want to do and make and tackle. If we were to come up with and finalize a list of sections and topics we wanted to tackle-- In theory, it would be possible to then assign all three of us to one given \"large\" section per week, and then work through all the relavent sub sections required for it. This would then mean weekly meetings could be dedicated to simply planning out and structuring a given \"large\" section and finalizing all the separate smaller sections we'd want to add, and then assigning each smaller section to certain people. And then we're able to sorta move together as a group and each weekly milestone ends up being \"oh, okay, we've finished this section for the week, now we can move on to a new section\". Just a small thought ^^</p>"},{"location":"_admin/fox-box/06_01_23/#things-to-cover","title":"Things to cover","text":"<ul> <li>Is everyone okay with the current directory layout with the weekly notes and the timeline?</li> <li>Any other ideas for layout and organization of our project and meeting notes?</li> <li>How do we organize for sections within the actual things we'll be writing</li> <li>Tweaks / Ideas for timeline</li> <li>Categories, cleaning up list and coming up with a reasonable list</li> <li>Anything else needed for the <code>README.md</code>?</li> <li>Homepage? (And probably category homepages as well)</li> <li>Running through modification of <code>mkdocs.yml</code></li> <li>Adding an extra file for feature requests and ideas to expand how we can work with our notes? (Basically just a random markdown file where we can all throw in ideas on how we can improve stuff with documentation e.g. formatting, structuring, maybe something neat that looks cool or useful that we can incoorporate, etc)</li> <li>Discussion on how us typing together individual sections will potentially work out- To some degree this will sorta be like, well, everyone's working on their own section of some sort of report or project in google docs and sometimes you can tell who did what part and while that's fine, I think some degree of consistency between each person's part would probably help in keeping the documentation remain cohesive for anyone to understand.</li> <li>Can we give ourselves a list of guidelines while writing? E.g. Remember your audience is incoming freshmen who know nothing, if it's confusing to you it's confusing to them, remember to be concise, etc. Just small notes like that, or basically a condensed version of those initial goals we put out of ourselves</li> </ul>"},{"location":"_admin/fox-box/06_10_23/","title":"TODO","text":"<p>[X] Update README.md [X] Fix config file to include reorganized sections / categories (and subcategories) [X] Clean up category list and actually create titles for each sube catg. [X] Update <code>timeline.md</code> to include more details about what it is we have to cover [ ] Message GC to properly assign categories to people so writing can begin for <code>Getting-Started</code> [X] Clean up guidelines.</p>"},{"location":"_admin/fox-box/06_12_23/","title":"Pre-Meeting Notes","text":""},{"location":"_admin/fox-box/06_12_23/#agenda-tentative","title":"Agenda (tentative)","text":"<ul> <li>How was writing for everyone? Do we need to actually make a better workflow for ourselves or not, I know I sorta just threw everyone into, well, writing. Which was probably less than ideal.</li> <li>Review <code>Getting-Started</code> and written sections</li> <li>Feedback for each other and ourselves?</li> <li>Which section to work on next? Look at categories, what should we add, remove, etc, can we shift anything around in terms of where we're putting what info-</li> <li>PROPER assignment of sections to each person so that we know who's writing what.</li> <li>I will be out the week of June 26; can decide what we will do about this next week</li> </ul>"},{"location":"_admin/fox-box/06_12_23/#bleh-version-of-plan","title":"Bleh version of plan","text":"<ul> <li>See how far everyone got, adapt meeting from there. If getting started is finished, review and see if we need more time to write. If getting started looks okay, then we move to a new section. If getting started isn't finished, then we continue to work on it (and maybe tack on this week's work too)</li> </ul>"},{"location":"_admin/fox-box/07_24_23/","title":"Last Minute Planning","text":""},{"location":"_admin/fox-box/07_24_23/#new-timeline","title":"New Timeline","text":""},{"location":"_admin/fox-box/07_24_23/#misc-notes","title":"Misc. Notes","text":"<ul> <li>3 Week Sprint</li> <li>~Jul 25 - August 12, 19ish days, with the 12th being my last day (unless we extend a bit further)</li> <li> <p>Need to figure out the following:</p> <ul> <li>What sections do we ABSOLUTELY need?</li> <li>What sections can be omitted?</li> <li>What's a realistic timeframe and/or workflow for drafting, proofing, and then finally committing each section / page? Need something fast but effective so we can keep moving without having to worry about whether or not something is done, good enough or whatnot. Goal here is to keep moving as muhc as possible</li> <li>Division of labor</li> </ul> </li> <li> <p>Bigger personal issue here: This is a task that if we want to rush in the next coming weeks, requires a decent bit of attention. And this is attention that I, personally, do not know if I have right now. There's other things for me to worry about at the moment between:</p> </li> <li>Packing</li> <li>Shopping</li> <li>Speccing out rig</li> <li>Finishing Protogen</li> <li>Hopefully finishing sword</li> <li>Reviewing for exam</li> <li>...a lot of packing and making sure that we have everything purchased</li> <li>What if we devised a... sort of grouping and rolling deployment sort of approach? So we basically just write one category per day and each category stands on its own while being entirely minimalistic and still potentially being beneficial.</li> <li>Better yet... what if we made this a sort of blog, so to speak? So we're given free reign to type and put in code snippets as we see fit and explain things as we go along. That could potentially work. Then it can all sorta be written as a rolling release, Gwen can write her parts, I can write mine, Ollie can proof and then they can just be published one by one. This also offers some long term flexibility in being able to add on additional info as well if we don't finish in time, rather than having a very static site where, so and so section goes here with these subcategories, and then a different section will be predetermined with a set list of other categories.</li> <li>This is especially because a lot of things are becoming, a lot looser with how we're going to approach things because we can't really go super in depth with a lot of this writing at this point which, sucks but sorta makes sense.</li> <li>I do think there's definitely some benefit to keeping a more dynamic approach rather than a static one... then again it's not like me cutting out a bunch of categories and having us go one by one with categories is super static either. Can always add or remove subcategories.</li> <li>editing this because I don't know why things aren't being rebuilts, github work plz</li> </ul>"},{"location":"_admin/info/","title":"Info","text":"<p>This category is for all informational files related to the project. This currently includes features, guidelines, and the current working timeline.</p>"},{"location":"_admin/info/categories/","title":"Categories (tentative)","text":"<p>These are the current categories we will try to write with each subcategory / page that we have to write out.</p>"},{"location":"_admin/info/categories/#getting-started","title":"Getting Started","text":"<ul> <li>Home Page (James)</li> <li>WPILib (Gwen)<ul> <li>What is this?</li> <li>Installation</li> <li>Basic Usage<ul> <li>How to use WPILib extension, how to use VSCode, hotkeys, directions, etc.</li> </ul> </li> <li>Good Practices<ul> <li>(info for Driver Station installation vs computers being used for programming)</li> </ul> </li> </ul> </li> <li>Libraries (Gwen)<ul> <li>Should include installation for the key ones we use, alongside how to import other libraries that may need to be used</li> </ul> </li> <li>Other Key Applications (James)</li> <li>~~Basic Hardware (Logan)~~</li> <li>~~Resources for Absolute Beginners (Technically All, James + Gwen?)~~ (I don't know if there's enough time to find these resources)</li> </ul>"},{"location":"_admin/info/categories/#project-organization-need-to-refine","title":"Project Organization (need to refine)","text":"<ul> <li>Robot Code Organization (Where's which file, etc)</li> <li>Project Types and Organization (wtf is a command based, what's a subsystem, etc)</li> <li>~~Coding Conventions~~ (...let's touch on this if possible but, it's nonessential for now)</li> <li>~~Developing as a Team~~</li> <li>~~Basic Examples~~</li> </ul>"},{"location":"_admin/info/categories/#autonomous-key","title":"Autonomous (KEY)","text":"<ul> <li>Path Creation and PathWeaver<ul> <li>Be sure to include various quirks such as translating paths later on to the (0, 0) of the robot itself!</li> </ul> </li> <li>Code Setup for Mecanum</li> <li>Code Setup for West Coast</li> <li>Characterization</li> <li>Odometry</li> <li>Kinematics<ul> <li>(? Might not need this section)</li> </ul> </li> <li>0 to Autonomous Workflow</li> <li>Constructing Autonomous Commands<ul> <li>Including paths, subsystems, etc, parallel commands, all that fun stuff</li> </ul> </li> </ul>"},{"location":"_admin/info/categories/#computer-vision","title":"Computer Vision","text":"<ul> <li>~~Limelight (and its quirks)~~</li> <li>~~Raspberry Pi / Co-Processors~~</li> <li>~~OpenCV~~</li> <li>~~GRIP~~</li> <li>~~NetworkTables~~</li> <li>Notes from James<ul> <li>Basically this needs to be heavily abbreviated. Can use the above topics, just can't have it become lengthy</li> </ul> </li> </ul>"},{"location":"_admin/info/categories/#basic-tutorials-code-examples-key","title":"Basic Tutorials / Code Examples (KEY)","text":"<ul> <li>PID</li> <li>What is PID</li> <li>PID Loops using WPILIB</li> <li>PID Loops using CTRE</li> <li>Field-Oriented Drive</li> <li>Basic Command-Based Subsystem (and overall paradigm)</li> <li>(need to add more)</li> </ul>"},{"location":"_admin/info/categories/#robot-controls-driving-the-robot-nonessential","title":"Robot Controls / Driving the Robot (nonessential)","text":"<ul> <li>~~How to Drive Well~~</li> <li>~~Picking / Assigning Driver(s)~~</li> <li>Designing Good Controller Layouts</li> <li>Guidelines for Two Controller Layouts</li> <li>~~Former Driver Q&amp;A~~</li> </ul>"},{"location":"_admin/info/categories/#maintainance-keep-it-to-an-overview-of-firmware-and-updates","title":"Maintainance (Keep it to an overview of firmware and updates)","text":"<ul> <li>~~Good Driver Station Practices~~</li> <li>RoboRIO Firmware</li> <li>Radio Firmware</li> <li>Motor Firmware</li> <li>WPILib Updates</li> <li>Library Updates</li> <li>~~Misc. Notes and Guidelines~~</li> </ul>"},{"location":"_admin/info/categories/#yearly-code-keeping-it-to-the-most-revent-years","title":"Yearly Code (Keeping it to the most revent years)","text":"<ul> <li>~~2019 - Deep Space (Gwen)~~</li> <li>~~2020 - Infinite Recharge (James)~~</li> <li>~~2021 - At-Home Challenge (James)~~</li> <li>2022 - Rapid React (James)</li> <li>2023 - Charged Up (Gwen)</li> </ul>"},{"location":"_admin/info/categories/#resources-keep-it-as-a-url-dump","title":"Resources (Keep it as a URL dump)","text":"<ul> <li>0 to Autonomous</li> <li>Beginner Resources to Java</li> <li>Beginner Resources for WPILib</li> <li>CTRE Examples</li> <li>WPILib Examples</li> </ul>"},{"location":"_admin/info/categories/#extra-categories","title":"~~Extra Categories~~","text":"<p>~~These are extra categories that we brainstormed that might be good to have but that we will only touch if we have extra time.~~</p> <ul> <li>~~Shuffleboard~~</li> <li>~~Electronics Basics~~</li> <li>~~Leadership / Good Practices~~ </li> <li>~~Random Tidbits / Quirks~~</li> </ul>"},{"location":"_admin/info/features/","title":"Feature requests","text":"<p>(Add larger features that we want in the project here so we can work on them and make sure we have note of it all) (May or may not need to add a format for when and what features were added to keep track of everything)</p>"},{"location":"_admin/info/guidelines/","title":"Guidelines for writing","text":"<ul> <li>Do your best to keep writing cohesive between each section. If writing between each section doesn't necessarily flow that well, it won't be the end of the world, but at a minimum make sure that someone can read through it and understand whatever it is that is being explained.</li> <li>Remember your audience! You are writing for someone with little to no experience with programming, similar to when you were freshmen. Assume the person reading this documentation knows nothing, but don't overexplain either.</li> <li>Avoid using first person pronouns (I, we, etc). In general, don't write in a weird POV.</li> <li>Be concise and do not overexplain. There are more detailed documents out there people can refer to if they truly want to get into the nitty gritty with details on how stuff really works.</li> <li>If something is already well enough explained in a different piece of documentation, e.g. the FRC Docs or there's a decent example with CTRE, point to those resources. No need to be redudant with what already exists, and there's no need to improve on pieces of documentation that are already well written.</li> <li>Be inclusive!</li> <li>If you're a little stuck- think about what would've helped you as a freshman. Would reading what you are currently writing only confuse you more, or is it actually clear and insightful information that is helping you learn a lot quicker about FRC Programming?</li> </ul>"},{"location":"_admin/info/timeline/","title":"Project Timeline","text":""},{"location":"_admin/info/timeline/#tentative-timeline","title":"Tentative timeline","text":"<p>Week 1: Determine categories, assign people to typing up individual parts Week 2: Do work for Getting Started category. Week 3: Finish Getting Started, Yearly Code Docs. Week 4: Do work for Autonomous, Computer Vision, and Project Organization. Week 5: Do work for Maintainance category, and dedicated code per year sections; Halfway checkpoint. Do we need to tweak anything? Week 6: Work on PID Control and Basic Tutorials (code examples) Category. Week 7: Work on Driving / Controller Layout Category. Week 8: Should be done writing everything at this point, should just be refinement, fixing typos, proofing, etc. Potentially could do some feature adding from here, like aditional comments, formatting, making the site more pretty, etc Week 9: More feature adding, continue proofing info as it's all editted, etc Week 10: Integration Hell! Migrate everything over to a separate repo for GitHub pages, add final touches and proofing, and send to Mr. Brew  </p>"},{"location":"_admin/info/timeline/#links-to-important-resources","title":"Links to important resources","text":"<p>GitHub Trello MkDocs Material Documentation Vanilla MkDocs Documentation I was going to add something for markdown reference but... you can honestly just do a quick search to figure out formatting and such ^^</p>"},{"location":"_admin/info/timeline/#week-0","title":"Week 0","text":""},{"location":"_admin/info/timeline/#things-to-cover","title":"Things to Cover","text":"<p> Determine overacrching goal / objective / focus of this documentation project  Get everybody onto the Trello Board  Determine back-end / front-end software to host documentation  Create GitHub Repo  </p>"},{"location":"_admin/info/timeline/#tasks-for-the-week","title":"Tasks for the Week","text":"<p>Team:  </p> <ul> <li>Come up with list of categories and topics that we need to cover within our documentation  </li> </ul> <p>James:</p> <ul> <li>Figure out some sort of project organization, create a work</li> <li>Figure out some semblence of some workflow<ul> <li>Come up with a timeline of what the next 10 weeks will look like</li> </ul> </li> <li>Organize notes froom meeting and add information to GitHub Repo  </li> <li>Work on a README.md</li> </ul>"},{"location":"_admin/info/timeline/#important-notes","title":"Important Notes","text":"<p>See the Week 1 notes </p>"},{"location":"_admin/info/timeline/#week-1","title":"Week 1","text":""},{"location":"_admin/info/timeline/#things-to-cover_1","title":"Things to Cover","text":"<p> Go over brainstormed categories and refine list to sections and topics everyone is satisified with  Go over workflow and overall project organization (directories, formatting, etc)  Assign groups and sections to different people</p>"},{"location":"_admin/info/timeline/#tasks-for-the-week_1","title":"Tasks for the Week","text":"<p>Team: </p> <ul> <li>Work through all of the \"Getting Started\" documents and try and organize it all together</li> </ul> <p>James:</p> <ul> <li>Docs Homepage</li> <li>Getting Started Homepage</li> <li>Other Key Applications</li> <li>Resources</li> </ul> <p>Gwen:</p> <ul> <li>WPILib</li> <li>Libraries</li> </ul> <p>Logan:</p> <ul> <li>Basic Hardware</li> </ul>"},{"location":"_admin/weekly-notes/05_29_23/","title":"Eagle Army 3488 Docs","text":"<p>The following is a rough outline of how documentation is going to be layed out, as well as just general broad planning for what is to come of this website. These are all notes typed prior to first meeting on discord.</p>"},{"location":"_admin/weekly-notes/05_29_23/#current-questions-regarding-the-direction-of-this-project-and-site","title":"Current questions regarding the direction of this project and site","text":"<ul> <li>What should be the goal of this project once it is complete?</li> <li>What should be the overall focus of this documentation? <ul> <li>How low level of an overview should these notes provide towards users?</li> </ul> </li> <li>How do we differentiate this piece of documentation from the FRC Docs? After all, the FRC Docs are a great place to get anything done and that's where I learned a lot of what I know how to do today. There has to be a line though between actually creating docs that are useful, versus just docs that are literal carbon one to one copies of docs that already exist as a fantastic resource<ul> <li>I think this is the biggest challenge of this site because while we can create our own documentation, most of our knowledge, well, literally stems from another piece of documentation. So there has to be a distinct, clear, and useful way in which this site is able to differentiate itself from the main FRC docs that users will probably find themselves using more often than not</li> </ul> </li> <li>We need to be able to list out some specific topics that will be covered.</li> <li>And then probably outline of each year's code and some corresponding documentation would also help out</li> <li>Demos of certain concepts such as PID?</li> <li>A good idea is that these docs can start as a point of reference of where to look for specific information and just detailed information about the code that we created in the past few years</li> <li>Key point: Determine the goal and objective of this documentation, and balance everything else from there.</li> <li>Ideas for goals / overarching purpose of these docs<ul> <li>Provide a high level overview of how to approach programming from a beginner's perspective</li> <li>Provide insight into more complicated topics and concepts that the frc docs don't give as much background on or that might be useful, e.g. pathfinding, computer vision, field-oriented drive, etc</li> <li>Specifically document code written between 2019 - 2023 (and subsequent years should add their own documentation for each year)</li> <li>Provide a guide for how programmers can start off coming from absolutely nothing so future members can start in an okay spot rather than from nothing at all-<ul> <li>Something general to note about this: The main deficiency that's been happening year to year is that when I (James) leave or someone else with a lot of background and knowledge graduates, all that information and technical know how of the team suddenly vanishes along with it. Why? Because there's no documentation. So basically, documentation needs to be a way for experienced members to leave behind that technical know how and information for future members to use so that the team isn't left with nothing at all.</li> <li>So with this in mind... let's reframe where we needs these notes to sorta go.</li> </ul> </li> <li>Documentation should act as a stepping stone for future members of the team to work from so they aren't left behind with nothing.</li> <li>Documentation should have a focus on being able to start off members who know little to nothing in a spot where they can feel comfortable with what they're working with<ul> <li>This then eliminates just being able to just document code from each individual year. While this may be beneficial, as well as showing a progression with each indiviudal design choice that was made year to year to incrementally improve the robot's capabilities as well as just overall structure for maintainability, we need to be able to help a member out who might not know anything at ALL about programming.</li> <li>Granted, this doesn't mean that we really have to start off right at basic basics. Maybe some assistance with navigating VSCode, getting used to installing stuff and knowing what libraries will typically be worked with might be helpful, but at the same time, each small little detail doesn't necessarily have to be outlined here. The actual FRC docs exist for that. Although some tips and guidelines would be helpful, as well as a high level outview that members can use to reference down the line just for a quick \"to do\" on knowing what to do and when for the set up process and all.</li> </ul> </li> <li>Documentation should:<ul> <li>Be able to get a member who knows next to nothing up to speed with how to program for FRC</li> <li>Provide a high level overview for basic tasks and maintaincance that comes with being a programmer, e.g. radios, firmware, installation and setup of Driver Station, potentially worrying about electronics, etc</li> <li>Provide high level overview guides for these tasks without getting too detailed, acting as a resource for members to cross check just as a quick glance</li> <li>Provide background on more technical pieces of code, e.g. pathfollowing, characterization (not exactly code), computer vision, field oriented drive, etc</li> <li>(Emphasis on high level it seems)</li> <li>Provide resources on where to look and go when more information is needed</li> </ul> </li> </ul> </li> </ul>"},{"location":"_admin/weekly-notes/05_29_23/#guidelines-notes-from-here-on-forward-may-be-redudant","title":"Guidelines (notes from here on forward may be redudant)","text":"<p>First, some random thoughts.</p> <p>In order to create good, effective documentation, I think there should be a few things to note. Namely, there needs to be a clear direction and objective of where we want this documentation to go, otherwise without a direction, we cannot take this project anywhere. Understanding what to do backend, frontend, and what information needs to exist is one thing, but trying to create and establish a project as a whole is a far different endeavor.</p> <p>Good documentation needs to be understandable and easy to use. It should be an actual resource and it shouldn't be painful having to look through it to find what you need. It should be usable! With code examples, explanations and all that fun stuff. It should be a helpful tool that developers and members can use with legitimate benefit. (As an added bonus, it should be maintainable by members as well so that they're able to add more information as more is accumulated.)</p>"},{"location":"_admin/weekly-notes/05_29_23/#technical-details","title":"Technical details","text":"<ul> <li>Backend / Frontend: Material Mkdocs</li> <li>Why? Because markdown is easy to use, there's a lot of feature for annotating and adding a lot of neat stuff to documents, and it looks really pretty. Not to mention, we can host on GitHub pages which takes out a lot of the overhead that comes with paying for a domain name, safely hosting a website, and worrying about uptime. Have GitHub handle it all for us.</li> </ul>"},{"location":"_admin/weekly-notes/05_30_23/","title":"Notes from 05/30/23 Discord Call","text":""},{"location":"_admin/weekly-notes/05_30_23/#overarcing-goals","title":"Overarcing Goals","text":"<ul> <li>Focus: Assume that the reader has little to no experience<ul> <li>Assume there's going to be a lot of newbies</li> <li>Don't just lecture, actually try and teach in such a way that's useful. Less regurgitation of technical information, and moreso guidance.<ul> <li>Link to pages</li> </ul> </li> </ul> </li> <li>Explained well</li> <li>Visuals, diagrams</li> <li>User-Friendly; Teaching to a toddler<ul> <li>Gives enough detail but doesn't drown with TOO much information. Too much pushes people away.</li> <li>Concise, straight and to the point</li> </ul> </li> <li>How to differentiate from FRC Docs:<ul> <li>FRC Docs are missing SHORT good bit code examples. Need more code samples that are fully commented and explained, could help people grasp things better in documentation. Ties back to visuals and giving more information.</li> <li>More technical: Give more background to mecanum auton, or auton in general because FRC docs are a little broad</li> </ul> </li> <li>Background on more technical stuff individual, such as trajectories, computer vision, etc<ul> <li>Yearly code breakdown (2019 - 2023)</li> <li>(More like a nice to have thingy)</li> </ul> </li> <li>Don't be racist in the robotics documentation</li> </ul>"},{"location":"_admin/weekly-notes/05_30_23/#timeframe-organization","title":"Timeframe / Organization","text":"<ul> <li>Finished Product: Mid August (James moves in August 12th)</li> <li>Milestones:<ul> <li>Weekly Goals?</li> <li>Trello</li> </ul> </li> <li>Determine timeline</li> </ul>"},{"location":"_admin/weekly-notes/05_30_23/#todo","title":"TODO","text":"<ul> <li>Create list of general categories / sections / topics<ul> <li>Larger sections (basics, environment setup, general maintaince / firmware, etc)</li> </ul> </li> </ul>"},{"location":"_admin/weekly-notes/06_06_23/","title":"Notes from 06/06/23 Call","text":""},{"location":"_admin/weekly-notes/06_06_23/#categories","title":"Categories","text":"<ul> <li> <p>Dedicated sections for year to year code</p> <ul> <li>2020(?) (old)</li> <li>2021</li> <li>2022</li> <li>2023</li> </ul> </li> <li> <p>\"Getting Started\"</p> <ul> <li>WPILib</li> <li>Which Libraries to Install</li> <li>Which other applications to install (NI Game Tools, etc. DO NOT OVEREXPLAIN, POINT TO WPI DOCS)<ul> <li>Brew Login: dbrewcyznski@d230.org; PW: EagleArmy3488</li> <li>Ask Brew for Serial every year, it changes</li> </ul> </li> <li>Where do I go if I don't know how to code? (Codecademy, Brew's class, whatever else we can find, youtube videos / series)</li> <li>Barebones explanation of how to use VSCode w/WPILib extension (common hotkeys, directions, etc)</li> <li>Basic Hardware overview (electronics, radio, etc)</li> <li>How to import other libraries</li> </ul> </li> <li> <p>\"Breakdown of Project Layout / Organization\"</p> <ul> <li>General coding / organization practices (keep Driver Station offline, windows 10 gae)</li> <li>What the heck are each of the folders in here, what are subsystems, commands, etc</li> <li>Explanation of project types / what projects are there?</li> <li>Code Snippet examples (basic command, subsystem, etc)</li> </ul> </li> <li> <p>\"Maintainance / good practices / Tips\"</p> <ul> <li>Practices for keeping stuff updated / firmware</li> <li>Weird small tidbits<ul> <li>\"RioLog is broken, idk why\"</li> <li>\"The password to the WSL install is ' ' (this is not a typo)\"</li> <li>\"Use \"WARNING! \" if you want your text to appear in the driver statiom</li> <li>DO NOT OVERLOAD WITH PRINT STATEMENTS, WE CRASHED THE ROBOT ONCE</li> </ul> </li> </ul> </li> <li> <p>\"Autonomous\"</p> <ul> <li>PathWeaver / Path Creation<ul> <li>Quirks (translate path to 0,0 of robot)</li> </ul> </li> <li>Mecanum (necessity because lack of documentation)</li> <li>West Coast</li> <li>Characterization (hopefully no more weird python version install thing)</li> <li>Odometry</li> <li>Basic workflow to go from nothing to self-driving robot</li> <li>Constructing autonomous commands (including subsystems, paths, etc)</li> </ul> </li> <li> <p>\"Computer Vision\"</p> <ul> <li>Limelight (multiple uses beyond GREEN)<ul> <li>IP Addressing: Switch from static to dynamic. Or reflash. Or Angry IP Scanner.</li> <li>tldr ip address dumb</li> </ul> </li> <li>Rasp Pi + Basic OpenCV</li> <li>GRIP</li> <li>Integration Hell</li> <li>NetworkTables</li> <li>(might be fun to pursue) YOLO models &gt;:3</li> </ul> </li> <li> <p>\"PID Control\"</p> <ul> <li>Using Phoenix Tuner</li> <li>Using... math</li> </ul> </li> <li> <p>\"Basic Tutorials\"</p> <ul> <li>Blank projects to basic working drive train<ul> <li>Tank</li> <li>Mecanum</li> </ul> </li> <li>Working drive train to autonomous ready code<ul> <li>Kinematics, odometry, etc</li> <li>Tank and mecanum</li> </ul> </li> <li>Basic Subsystem code<ul> <li>Timer</li> <li>Command</li> </ul> </li> <li>Basic Command based project<ul> <li>Mainly point of comparison between timer vs command</li> </ul> </li> <li>Basic Computer Vision<ul> <li>Aka how to pull from network tables</li> </ul> </li> <li>Basics for adding data to shuffleboard</li> <li>Basic PID project<ul> <li>Both pos and velocity</li> </ul> </li> </ul> </li> <li> <p>\"Driving / Controller Layout\"</p> <ul> <li>How to not drive badly</li> <li>How to not be designated driver</li> <li>How to not freak out on the field</li> <li>How to not make a shitty control scheme</li> <li>Splitting to two controllers</li> <li>Field Oriented Drive</li> </ul> </li> <li> <p>\"Resources\"</p> <ul> <li>(Dup) Where do I go if I don't know how to code? (Codecademy, Brew's class, whatever else we can find, youtube videos / series)</li> </ul> </li> </ul> <ul> <li>\"Shuffleboard\"<ul> <li>DO NOT HARDCODE ANYTHING, autopopulation gae</li> </ul> </li> <li>\"Electronics Basics\"<ul> <li>because for some reason we don't have a dedicated electronics team</li> </ul> </li> <li>\"Leadership / Good Practices? Organization, Program Testing, etc\"</li> <li>\"Random tidbits\"</li> </ul>"},{"location":"_admin/weekly-notes/06_13_23/","title":"Notes from 06/13/23","text":""},{"location":"_admin/weekly-notes/06_13_23/#what-did-we-do","title":"What did we do?","text":"<ul> <li>idk</li> <li>Continuing on Getting Started, target finish by Friday</li> <li>@Logan maybe work on electronic specific stuff?</li> <li>Assigned Sections for next week, we'll be working on documenting the yearly code. See Categories for details</li> <li>no more trello</li> <li></li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Ready to get started with programming and developing code for the robot? This is the place to start! As a brief overview, this section will walk you through the installation of important applications such as WPILib and CTRE, and after installation we will walk you through the basics of hardware you can expect yourself to be working with.</p> <p>Feel free to check out Additional Resources for more info on getting started, and whenever you're ready, feel free to move on to WPILib to get started on installation.</p>"},{"location":"getting-started/#a-personal-note","title":"A Personal Note:","text":"<p>Setup is one of those things that you don't really think is going to be that bad, but in the case of development for FRC, there is quite a bit of software to go through, install, learn and get a feel for. It seems like a lot, but we promise you, once you get the hang of things! Installing each required application will become a breeze and you'll learn what each tool is used for.</p>"},{"location":"getting-started/key-applications/","title":"Other Software and Applications to Know","text":"<p>WPILib will be the main application you will be using for writing code, but there are other pieces of software that are good to know and keep in mind throughout your development of the robot to make your life a lot easier. This section will briefly go over a few of these applications, and what they can be useful for. Always feel free to look around for tools of your own if it'll aid you in your programming!</p>"},{"location":"getting-started/key-applications/#ctre","title":"CTRE","text":""},{"location":"getting-started/key-applications/#phoenix-tuner","title":"Phoenix Tuner","text":""},{"location":"getting-started/key-applications/#dashboards","title":"Dashboards","text":""},{"location":"getting-started/key-applications/#shuffleboard","title":"ShuffleBoard","text":""},{"location":"getting-started/key-applications/#smartdashboard","title":"SmartDashboard","text":""},{"location":"getting-started/key-applications/#networking","title":"Networking","text":""},{"location":"getting-started/key-applications/#windows-control-panel","title":"Windows Control Panel","text":""},{"location":"getting-started/key-applications/#angry-ip-scanner","title":"Angry IP Scanner","text":""},{"location":"getting-started/key-applications/#command-line","title":"Command Line","text":""},{"location":"getting-started/key-applications/#outlineviewer","title":"OutlineViewer","text":""},{"location":"getting-started/key-applications/#ni-game-tools-suite","title":"NI Game Tools Suite","text":""},{"location":"getting-started/key-applications/#driver-station","title":"Driver Station","text":""},{"location":"getting-started/key-applications/#rio-flasher","title":"RIO Flasher","text":""},{"location":"getting-started/key-applications/#radio-flasher","title":"Radio Flasher","text":""},{"location":"getting-started/key-applications/#misc","title":"Misc.","text":""},{"location":"getting-started/key-applications/#wsl","title":"WSL","text":""},{"location":"getting-started/key-applications/#rufus","title":"Rufus","text":""},{"location":"getting-started/key-applications/#balena-etcher","title":"Balena Etcher","text":""},{"location":"getting-started/key-applications/#git","title":"Git","text":""},{"location":"getting-started/key-applications/#winscp","title":"WinSCP","text":""},{"location":"getting-started/key-applications/#putty","title":"PuTTY","text":""},{"location":"getting-started/key-applications/#more-specific-apps","title":"More specific apps","text":""},{"location":"getting-started/key-applications/#autonomous-trajectory-generation","title":"Autonomous / Trajectory Generation","text":""},{"location":"getting-started/key-applications/#pathweaver","title":"Pathweaver","text":""},{"location":"getting-started/key-applications/#pathmaker","title":"PathMaker(?)","text":""},{"location":"getting-started/key-applications/#sysid","title":"SysID","text":""},{"location":"getting-started/key-applications/#computer-vision","title":"Computer Vision","text":""},{"location":"getting-started/key-applications/#python","title":"Python","text":""},{"location":"getting-started/key-applications/#opencv","title":"OpenCV","text":""},{"location":"getting-started/key-applications/#grip","title":"GRIP","text":""},{"location":"getting-started/key-applications/#limelight","title":"\"Limelight\"","text":""},{"location":"getting-started/libraries/","title":"Libraries","text":""},{"location":"getting-started/resources/","title":"Additional Resources for Getting Started","text":""},{"location":"getting-started/resources/#learning-java","title":"Learning Java","text":""},{"location":"getting-started/resources/#frc-robot-basics","title":"FRC Robot Basics","text":""},{"location":"getting-started/wpilib/","title":"WPILib","text":""},{"location":"getting-started/wpilib/#what-is-it","title":"What is it?","text":"<p>WPILib is a library and suite of tools used for programming FRC robots. It'll be your primary tool when programming your robot and you'll get very familiar with it over time. </p>"},{"location":"getting-started/wpilib/#installation","title":"Installation","text":"<p>Getting WPILib set up for the first time is very simple.</p> <ul> <li>Download the .iso file from the latest non-prelease version of WPILib from this link: https://github.com/wpilibsuite/allwpilib/releases</li> <li>Open the file once its downloaded and run the installer .exe file.<ul> <li>If you get a SmartScreen warning, click more info and run anyway.</li> </ul> </li> <li>Go through the installer, selecting the options \"Install for all users\" and \"Download for this computer\".</li> <li>Once the install finishes, you can access the different tools using the shortcuts on your desktop.</li> </ul>"},{"location":"getting-started/wpilib/#basic-usage","title":"Basic Usage","text":"<p>Everything you do with the programming side of WPILib will be through</p>"},{"location":"getting-started/wpilib/#good-practuces","title":"Good Practuces","text":""},{"location":"getting-started/wpilib/#todo-briefly-explain-wpilib-programs","title":"TODO: Briefly explain WPILib programs.","text":""}]}